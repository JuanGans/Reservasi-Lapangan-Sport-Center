// GENERATOR PRISMA
generator client {
  provider = "prisma-client-js"
}

// DATASOURCE PRISMA
datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

// MODEL USER
model Users {
  id          Int            @id @default(autoincrement())
  fullname    String         @db.VarChar(255)
  email       String         @unique @db.VarChar(255)
  username    String         @unique @db.VarChar(100)
  password    String         @db.VarChar(255)
  no_hp       String         @db.VarChar(15)
  user_img    String         @db.VarChar(255)
  role        Role           @default(member)
  bookings    Bookings[]
  notifications Notifications[]

  @@map("Users")
}

// ENUM ROLE
enum Role {
  member
  admin
}

// MODEL FACILITY
model Facilities {
  id                Int       @id @default(autoincrement())
  field_name        String    @db.VarChar(255)
  field_desc        String    @db.VarChar(255)
  field_image       String?   @db.VarChar(1000)
  price_per_session Decimal   @db.Decimal(10,2)
  avg_rating        Float     @default(0)
  total_review      Int       @default(0)
  bookings          Bookings[]  

  @@map("Facilities")
}

// MODEL BOOKING
model Bookings {
  id             Int              @id @default(autoincrement())
  user           Users            @relation(fields: [userId], references: [id])
  userId         Int
  facility       Facilities       @relation(fields: [facilityId], references: [id])
  facilityId     Int
  booking_date   DateTime
  booking_status BookingStatus    @default(pending)
  expired_at     DateTime?        // Optional: waktu kedaluwarsa jika belum dibayar
  total_price    Int              
  sessions       BookingSessions[]
  transaction    Transactions?
  review         Reviews?
  // notifications  Notifications[]
  created_at     DateTime         @default(now())
  updated_at     DateTime         @updatedAt

  @@map("Bookings")
}


// ENUM BOOKING STATUS
enum BookingStatus {
  pending     // Belum dibayar (Proses Booking)
  paid        // Sudah dibayar (Masih menunggu konfirmasi oleh admin)
  confirmed   // Booking sudah dikonfirmasi oleh admin -> Bisa dipakai
  canceled    // Booking ditolak oleh admin 
  expired     // Kadaluarsa (tidak dibayar dalam waktu tertentu)
  review      // Booking selesai -> melakukan review
  completed   // Booking selesai digunakan dan review
}

// MODEL BOOKING SESSION
model BookingSessions {
  id            Int      @id @default(autoincrement())
  booking       Bookings @relation(fields: [bookingId], references: [id])
  bookingId     Int
  start_time    DateTime
  end_time      DateTime
  session_label String   // Contoh: "08:00 - 09:00"

  @@map("BookingSessions")
}

model Transactions {
  id              Int               @id @default(autoincrement())
  booking         Bookings          @relation(fields: [bookingId], references: [id])
  bookingId       Int               @unique
  amount          Int?
  status          TransactionStatus @default(pending)
  payment_method  PaymentMethod     @default(Cash)
  payment_proof   String?           @db.VarChar(1000)
  payment_time    DateTime?
  created_at      DateTime          @default(now())
  updated_at      DateTime          @updatedAt

  @@map("Transactions")
}

// ENUM PAYMENT METHOD
enum PaymentMethod {
  Cash
  Ovo
  Dana
  Gopay
  LinkAja
  Shopeepay
  BNI
  BCA
  BRI
  Mandiri
}

// ENUM UNTUK STATUS TRANSAKSI
enum TransactionStatus {
  pending   // Pembayaran masih berlangsung
  paid      // Pembayaran sudah dibayar
  failed    // Pembayaran gagal atau ditolak
  expired   // Pembayaran tidak dilakukan karena sudah kadaluarsa
  refunded  // Pembayaran dilakukan refund karena user membatalkan booking atas izin dan konfirmasi admin
}


// MODEL REVIEW
model Reviews {
  id         Int      @id @default(autoincrement())
  booking    Bookings @relation(fields: [bookingId], references: [id])
  bookingId  Int      @unique
  rating     Int
  comment    String?
  created_at DateTime @default(now())
  updated_at DateTime @updatedAt

  @@map("Reviews")
}

// MODEL NOTIFICATION
model Notifications {
  id             Int              @id @default(autoincrement())
  user           Users            @relation(fields: [userId], references: [id])
  userId         Int
  bookingId      Int?             @unique  // Sebagai Target Untuk ID Booking (UNIK)
  transactionId  Int?             @unique   // Sebagai Target Untuk ID Transaksi (UNIK)
  message        String
  type           NotificationType @default(info)
  is_read        Boolean          @default(false)
  created_at     DateTime         @default(now())
  updated_at     DateTime         @updatedAt

  @@map("Notifications")
}

// ENUM UNTUK NOTIFICATION TYPE
enum NotificationType {
  info        // notifikasi berkaitan dengan info tambahan -> bisa dihapus notifikasi
  booking     // notifikasi berkaitan dengan masih booking -> belum di proses
  payment     // notifikasi berkaitan dengan proses transaksi -> membayar
  paid        // notifikasi berkaitan dengan pembayaran telah dibayar
  confirmed   // notifikasi berkaitan dengan booking berhasil dikonfirmasi admin -> bisa dihapus
  canceled    // notifikasi berkaitan dengan booking ditolak admin -> bisa dihapus
  expired     // notifikasi berkaitan dengan booking kadaluarsa (tidak dibayar dalam waktu tertentu)
  review      // notifikasi berkaitan dengan review
  completed   // notifikasi selesai booking -> bisa dihapus notifikasi
}